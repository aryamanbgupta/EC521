{
  "vulnerabilities": [
    {
      "id": "SNYK-JS-ADMZIP-1065796",
      "title": "Directory Traversal",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
      "credit": [
        "cthackers"
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "adm-zip",
      "references": [
        {
          "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [],
      "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
      "epssDetails": null,
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-22"
        ]
      },
      "packageName": "adm-zip",
      "proprietary": false,
      "creationTime": "2021-01-28T07:59:50.454879Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-01-28T07:59:22Z",
      "packageManager": "npm",
      "publicationTime": "2021-02-15T17:04:18.109270Z",
      "modificationTime": "2021-02-15T17:04:18.111270Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vscode-zipexplorer@0.3.1",
        "adm-zip@0.4.7"
      ],
      "upgradePath": [
        false,
        "adm-zip@0.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "adm-zip",
      "version": "0.4.7",
      "__filename": "/Users/zta/Docs/EC521/EC521/src/unzipped/slevesque-vscode-zipexplorer-0.3.1/extension/node_modules/adm-zip/package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:adm-zip:20180415",
      "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H/E:H/RL:O/RC:C",
      "credit": [
        "Snyk Security Research",
        "SÃ©bastien Mignot",
        "Alex Chapman"
      ],
      "semver": {
        "vulnerable": [
          "<0.4.11"
        ]
      },
      "exploit": "High",
      "fixedIn": [
        "0.4.11"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "critical",
      "cvssScore": 9.4,
      "functions": [
        {
          "version": [
            ">0.1.1 <0.4.11"
          ],
          "functionId": {
            "filePath": "adm-zip.js",
            "className": null,
            "functionName": "module.exports.getEntry"
          }
        }
      ],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "adm-zip",
      "references": [
        {
          "url": "https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde",
          "title": "GitHub Commit"
        },
        {
          "url": "https://hackerone.com/reports/362118",
          "title": "Hackerone Report"
        },
        {
          "url": "https://github.com/snyk/zip-slip-vulnerability",
          "title": "Zip Slip Advisory"
        },
        {
          "url": "https://security.snyk.io/research/zip-slip-vulnerability",
          "title": "Zip Slip Advisory"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N",
          "cvssV3BaseScore": 5.5,
          "modificationTime": "2022-01-03T16:12:48.999778Z"
        }
      ],
      "description": "## Overview\n\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip).\n\n## Details\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n\r\n+2018-04-15 22:04:29 ..... 19 19 good.txt\r\n\r\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\r\n\r\n```\n\n## Remediation\n\nUpgrade `adm-zip` to version 0.4.11 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f)\n\n- [GitHub Commit](https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde)\n\n- [Hackerone Report](https://hackerone.com/reports/362118)\n\n- [Zip Slip Advisory](https://github.com/snyk/zip-slip-vulnerability)\n\n- [Zip Slip Advisory](https://security.snyk.io/research/zip-slip-vulnerability)\n",
      "epssDetails": {
        "percentile": "0.36849",
        "probability": "0.00089",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2018-1002204"
        ],
        "CWE": [
          "CWE-29"
        ],
        "NSP": [
          "681",
          "994"
        ],
        "GHSA": [
          "GHSA-3v6h-hqm4-2rg6"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-ADMZIP-11093"
        ]
      },
      "packageName": "adm-zip",
      "proprietary": true,
      "creationTime": "2018-05-30T12:09:16.138000Z",
      "functions_new": [
        {
          "version": [
            ">0.1.1 <0.4.11"
          ],
          "functionId": {
            "filePath": "adm-zip.js",
            "functionName": "module.exports.getEntry"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-ADMZIP-11093"
      ],
      "disclosureTime": "2018-04-14T21:00:00Z",
      "packageManager": "npm",
      "publicationTime": "2018-05-31T07:09:16Z",
      "modificationTime": "2022-08-25T12:19:52.295190Z",
      "socialTrendAlert": false,
      "severityWithCritical": "critical",
      "from": [
        "vscode-zipexplorer@0.3.1",
        "adm-zip@0.4.7"
      ],
      "upgradePath": [
        false,
        "adm-zip@0.4.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "adm-zip",
      "version": "0.4.7",
      "__filename": "/Users/zta/Docs/EC521/EC521/src/unzipped/slevesque-vscode-zipexplorer-0.3.1/extension/node_modules/adm-zip/package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-MINIMIST-2429795",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<0.2.4",
          ">=1.2.0 <1.2.6"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.4",
        "1.2.6"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "low",
      "cvssScore": 3.7,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "minimist",
      "references": [
        {
          "url": "https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703",
          "title": "Fix Commit"
        },
        {
          "url": "https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
          "title": "Fix Commit"
        },
        {
          "url": "https://github.com/minimistjs/minimist/blob/master/index.js%23L69",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "cvssV3BaseScore": 5.6,
          "modificationTime": "2022-05-18T11:05:33.152638Z"
        },
        {
          "assigner": "NVD",
          "severity": "critical",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "modificationTime": "2022-04-13T01:10:15.021168Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "critical",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "modificationTime": "2023-04-24T13:51:51.456864Z"
        }
      ],
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of âpathâ, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototypeâ use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. âJavaScript prototype pollution attack in NodeJS application.â GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.4, 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703)\n- [Fix Commit](https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [Vulnerable Code](https://github.com/minimistjs/minimist/blob/master/index.js#L69)\n",
      "epssDetails": {
        "percentile": "0.66759",
        "probability": "0.00333",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "packageName": "minimist",
      "proprietary": false,
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-03-18T12:24:05Z",
      "packageManager": "npm",
      "publicationTime": "2022-03-21T12:09:35Z",
      "modificationTime": "2023-04-24T13:51:51.456864Z",
      "socialTrendAlert": false,
      "severityWithCritical": "low",
      "from": [
        "vscode-zipexplorer@0.3.1",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/zta/Docs/EC521/EC521/src/unzipped/slevesque-vscode-zipexplorer-0.3.1/extension/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-MINIMIST-559764",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "credit": [
        "Snyk Security Team"
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.6,
      "functions": [
        {
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ],
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "setKey"
          }
        },
        {
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ],
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "module.exports.setKey"
          }
        }
      ],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "minimist",
      "references": [
        {
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
          "title": "Command Injection PoC"
        },
        {
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
          "title": "GitHub Fix Commit #1"
        },
        {
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
          "title": "GitHub Fix Commit #2"
        },
        {
          "url": "https://snyk.io/blog/prototype-pollution-minimist/",
          "title": "Snyk Research Blog"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-05-03T23:19:09.248741Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "cvssV3BaseScore": 5.6,
          "modificationTime": "2022-09-01T16:53:55.159376Z"
        },
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "cvssV3BaseScore": 5.6,
          "modificationTime": "2022-04-23T01:11:18.536458Z"
        }
      ],
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of âpathâ, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototypeâ use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. âJavaScript prototype pollution attack in NodeJS application.â GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "epssDetails": {
        "percentile": "0.41331",
        "probability": "0.00105",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "1179"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ]
      },
      "packageName": "minimist",
      "proprietary": true,
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "functions_new": [
        {
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ],
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          }
        },
        {
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ],
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          }
        }
      ],
      "alternativeIds": [],
      "disclosureTime": "2020-03-10T08:22:24Z",
      "packageManager": "npm",
      "publicationTime": "2020-03-11T08:22:19Z",
      "modificationTime": "2022-09-01T16:53:55.159376Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vscode-zipexplorer@0.3.1",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/zta/Docs/EC521/EC521/src/unzipped/slevesque-vscode-zipexplorer-0.3.1/extension/node_modules/minimist/package.json",
      "parentDepType": "prod"
    }
  ],
  "ok": false,
  "dependencyCount": 5,
  "org": "z.a.timur",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": false,
    "disregardFilesystemIgnores": false
  },
  "summary": "4 vulnerable dependency paths",
  "remediation": {
    "unresolved": [],
    "upgrade": {
      "adm-zip@0.4.7": {
        "upgradeTo": "adm-zip@0.5.2",
        "upgrades": [
          "adm-zip@0.4.7",
          "adm-zip@0.4.7"
        ],
        "vulns": [
          "SNYK-JS-ADMZIP-1065796",
          "npm:adm-zip:20180415"
        ]
      },
      "mkdirp@0.5.1": {
        "upgradeTo": "mkdirp@0.5.2",
        "upgrades": [
          "minimist@0.0.8",
          "minimist@0.0.8"
        ],
        "vulns": [
          "SNYK-JS-MINIMIST-2429795",
          "SNYK-JS-MINIMIST-559764"
        ]
      }
    },
    "patch": {},
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 4,
  "projectName": "vscode-zipexplorer",
  "displayTargetFile": "extension/package.json",
  "hasUnknownVersions": false,
  "path": "/Users/zta/Docs/EC521/EC521/src/unzipped/slevesque-vscode-zipexplorer-0.3.1"
}
