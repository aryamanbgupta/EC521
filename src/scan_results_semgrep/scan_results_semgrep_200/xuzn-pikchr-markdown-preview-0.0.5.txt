<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="7" tests="7" time="0.0">
	<testsuite disabled="0" errors="0" failures="7" name="semgrep results" skipped="0" tests="7" time="0">
		<testcase name="c.lang.security.insecure-use-memset.insecure-use-memset" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" file="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" line="5335">
			<failure type="WARNING" message="When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.">    memset(pList, 0, sizeof(*pList));
</failure>
		</testcase>
		<testcase name="c.lang.security.insecure-use-memset.insecure-use-memset" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" file="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" line="5392">
			<failure type="WARNING" message="When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.">  memset(pNew, 0, sizeof(*pNew));
</failure>
		</testcase>
		<testcase name="c.lang.security.insecure-use-memset.insecure-use-memset" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" file="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" line="6951">
			<failure type="WARNING" message="When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.">    memset(&amp;dot, 0, sizeof(dot));
</failure>
		</testcase>
		<testcase name="c.lang.security.insecure-use-memset.insecure-use-memset" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" file="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" line="7596">
			<failure type="WARNING" message="When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.">  memset(&amp;x, 0, sizeof(x));
</failure>
		</testcase>
		<testcase name="c.lang.security.insecure-use-memset.insecure-use-memset" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" file="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" line="7736">
			<failure type="WARNING" message="When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.">      memset(args, 0, sizeof(args));
</failure>
		</testcase>
		<testcase name="c.lang.security.insecure-use-memset.insecure-use-memset" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" file="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" line="7780">
			<failure type="WARNING" message="When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.">  memset(&amp;s, 0, sizeof(s));
</failure>
		</testcase>
		<testcase name="c.lang.security.insecure-use-memset.insecure-use-memset" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" file="/Users/zta/Docs/EC521/EC521/src/unzipped/xuzn-pikchr-markdown-preview-0.0.5/extension/pikchr.c" line="7793">
			<failure type="WARNING" message="When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.">    memset(&amp;token,0,sizeof(token));
</failure>
		</testcase>
	</testsuite>
</testsuites>

