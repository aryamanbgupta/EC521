<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="33" tests="33" time="0.0">
	<testsuite disabled="0" errors="0" failures="33" name="semgrep results" skipped="0" tests="33" time="0">
		<testcase name="javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/scripts/changelog.pug" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/scripts/changelog.pug" line="30">
			<failure type="WARNING" message="Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.">                    .change-description!= change
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="49">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        const files = sketch.files.map(file =&gt; path.join(sketch.dir, file));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="49">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        const files = sketch.files.map(file =&gt; path.join(sketch.dir, file));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="77">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        let filePath = path.join(wsPath, sketchName);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="81">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                sketch = p5_server_1.Sketch.create(path.join(filePath, 'index.html'), {
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="98">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                if (yield (0, fileHelpers_1.fileExists)(path.join(dir, scriptFile)))
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="101">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                for (let i = 1; yield (0, fileHelpers_1.fileExists)(path.join(dir, scriptFile)); i++) {
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="215">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    return vscode_1.workspace.fs.rename(vscode_1.Uri.file(item.mainFilePath), vscode_1.Uri.file(path.join(item.dir, name)));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="219">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    return vscode_1.workspace.fs.rename(vscode_1.Uri.file(item.scriptFilePath), vscode_1.Uri.file(path.join(item.dir, name)));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/commands.js" line="223">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const target = vscode_1.Uri.file(path.join(path.dirname(item.fsPath), name));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="33">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        const files = sketch.files.map(file =&gt; path.join(sketch.dir, file));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="33">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        const files = sketch.files.map(file =&gt; path.join(sketch.dir, file));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="61">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        let filePath = path.join(wsPath, sketchName);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="65">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                sketch = p5_server_1.Sketch.create(path.join(filePath, 'index.html'), {
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="82">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                if (yield (0, utils_1.fileExists)(path.join(dir, scriptFile)))
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="85">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                for (let i = 1; yield (0, utils_1.fileExists)(path.join(dir, scriptFile)); i++) {
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="196">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    return vscode_1.workspace.fs.rename(vscode_1.Uri.file(item.mainFilePath), vscode_1.Uri.file(path.join(item.dir, name)));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="200">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    return vscode_1.workspace.fs.rename(vscode_1.Uri.file(item.scriptFilePath), vscode_1.Uri.file(path.join(item.dir, name)));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchCommands.js" line="204">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const target = vscode_1.Uri.file(path.join(path.dirname(item.fsPath), name));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" line="150">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    .map(file =&gt; new FileItem(path.join(sketch.dir, file))),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" line="150">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    .map(file =&gt; new FileItem(path.join(sketch.dir, file))),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" line="199">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const files = unassociatedFiles.map(name =&gt; path.join(dir, name));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/sketchExplorer.js" line="199">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const files = unassociatedFiles.map(name =&gt; path.join(dir, name));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" line="67">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    .map(file =&gt; new elements_1.FileItem(path.join(sketch.dir, file))),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" line="67">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    .map(file =&gt; new elements_1.FileItem(path.join(sketch.dir, file))),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" line="116">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const files = unassociatedFiles.map(name =&gt; path.join(dir, name));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/SketchTreeProvider.js" line="116">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const files = unassociatedFiles.map(name =&gt; path.join(dir, name));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" line="73">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    .map(file =&gt; new elements_1.FileItem(path.join(sketch.dir, file), element)),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" line="73">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                    .map(file =&gt; new elements_1.FileItem(path.join(sketch.dir, file), element)),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" line="124">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const files = unassociatedFiles.map(fileName =&gt; path.join(dir, fileName));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/out/tree/treeProvider.js" line="124">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const files = unassociatedFiles.map(fileName =&gt; path.join(dir, fileName));
</failure>
		</testcase>
		<testcase name="html.security.audit.missing-integrity.missing-integrity" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/resources/changelog.html" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/resources/changelog.html" line="1">
			<failure type="WARNING" message="This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;title&gt;What’s New in P5 Server&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@primer/css@17.9/dist/primer.css&quot;&gt;&lt;script src=&quot;https://unpkg.com/@primer/css@17.9/dist/primer.js&quot;&gt;&lt;/script&gt;&lt;style&gt;/*!
</failure>
		</testcase>
		<testcase name="html.security.audit.missing-integrity.missing-integrity" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/resources/changelog.html" file="/Users/zta/Docs/EC521/EC521/src/unzipped/osteele-p5-server-1.10.0/extension/resources/changelog.html" line="1">
			<failure type="WARNING" message="This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;title&gt;What’s New in P5 Server&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@primer/css@17.9/dist/primer.css&quot;&gt;&lt;script src=&quot;https://unpkg.com/@primer/css@17.9/dist/primer.js&quot;&gt;&lt;/script&gt;&lt;style&gt;/*!
</failure>
		</testcase>
	</testsuite>
</testsuites>

