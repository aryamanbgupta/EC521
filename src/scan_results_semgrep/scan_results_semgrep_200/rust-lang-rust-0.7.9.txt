<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="13" tests="13" time="0.0">
	<testsuite disabled="0" errors="0" failures="13" name="semgrep results" skipped="0" tests="13" time="0">
		<testcase name="javascript.lang.security.audit.spawn-shell-true.spawn-shell-true" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" line="187">
			<failure type="ERROR" message="Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.">            childProcess = child_process.spawn(rlsPath, [], {
                env,
                cwd,
                shell: true,
            });
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.spawn-shell-true.spawn-shell-true" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" line="204">
			<failure type="ERROR" message="Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.">            childProcess = child_process.spawn(config.path, ['run', config.channel, rlsPath], { env, cwd, shell: true });
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" line="213">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const logPath = path.join(rls.cwd, `rls${Date.now()}.log`);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustAnalyzer.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustAnalyzer.js" line="190">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                const logPath = path.join(folder.uri.fsPath, `ra-${Date.now()}.log`);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/utils/workspace.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/utils/workspace.js" line="10">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">    const rootManifest = path.join(workspaceRoot, 'Cargo.toml');
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/utils/workspace.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/utils/workspace.js" line="29">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        const cargoPath = path.join(current, 'Cargo.toml');
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" line="24">
			<failure type="WARNING" message="RegExp() called with a `componentName` function argument, this might allow an attacker to cause a Denial of Service (DoS) within your application as RegExP which blocks the main thread.">    return new RegExp(`^(${componentName}.*) \\((default|installed)\\)$`);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" line="134">
			<failure type="WARNING" message="`stdout
            .toString().replace` method will only replace the first occurrence when used with a string argument ('\r'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.">        return exec(`${config.path} component list --toolchain ${config.channel}`).then(({ stdout }) =&gt; stdout
            .toString()
            .replace('\r', '')
</failure>
		</testcase>
		<testcase name="javascript.lang.security.detect-child-process.detect-child-process" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" line="187">
			<failure type="ERROR" message="Detected calls to child_process from a function argument `rls`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ">            childProcess = child_process.spawn(rlsPath, [], {
</failure>
		</testcase>
		<testcase name="javascript.lang.security.detect-child-process.detect-child-process" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rls.js" line="204">
			<failure type="ERROR" message="Detected calls to child_process from a function argument `rustup`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ">            childProcess = child_process.spawn(config.path, ['run', config.channel, rlsPath], { env, cwd, shell: true });
</failure>
		</testcase>
		<testcase name="javascript.lang.security.detect-child-process.detect-child-process" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustAnalyzer.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustAnalyzer.js" line="188">
			<failure type="ERROR" message="Detected calls to child_process from a function argument `config`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ">            const childProcess = child_process.exec(binPath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.detect-child-process.detect-child-process" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" line="247">
			<failure type="ERROR" message="Detected calls to child_process from a function argument `rustupPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ">            .execSync(`${rustupPath} show active-toolchain`, {
</failure>
		</testcase>
		<testcase name="javascript.lang.security.detect-child-process.detect-child-process" classname="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" file="/Users/zta/Docs/EC521/EC521/src/unzipped/rust-lang-rust-0.7.9/extension/out/src/rustup.js" line="261">
			<failure type="ERROR" message="Detected calls to child_process from a function argument `rustupPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ">            .execSync(`${rustupPath} show`, {
</failure>
		</testcase>
	</testsuite>
</testsuites>

