<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="3" tests="3" time="0.0">
	<testsuite disabled="0" errors="0" failures="3" name="semgrep results" skipped="0" tests="3" time="0">
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/HookyQR-beautify-1.5.0/extension/options.js" file="/Users/zta/Documents/EC521/src/unzipped/HookyQR-beautify-1.5.0/extension/options.js" line="29">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">  const fullPath = path.join(dir, fileName);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/HookyQR-beautify-1.5.0/extension/options.js" file="/Users/zta/Documents/EC521/src/unzipped/HookyQR-beautify-1.5.0/extension/options.js" line="29">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">  const fullPath = path.join(dir, fileName);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/HookyQR-beautify-1.5.0/extension/options.js" file="/Users/zta/Documents/EC521/src/unzipped/HookyQR-beautify-1.5.0/extension/options.js" line="147">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">        else configFile = path.resolve(root, beautify_config);
</failure>
		</testcase>
	</testsuite>
</testsuites>
