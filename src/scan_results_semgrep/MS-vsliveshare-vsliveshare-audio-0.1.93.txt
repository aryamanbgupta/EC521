<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="19" tests="19" time="0.0">
	<testsuite disabled="0" errors="0" failures="19" name="semgrep results" skipped="0" tests="19" time="0">
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="135">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            basePath = path.join(basePath, pkg.installPath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="141">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            basePath = path.join(basePath, pkg.unpackPath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="141">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            basePath = path.join(basePath, pkg.unpackPath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="162">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            return path.join(basePath, pkg.retryDeletePath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="162">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            return path.join(basePath, pkg.retryDeletePath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="231">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            return path.join(extensionutil_1.ExtensionUtil.getGlobalStoragePath(), pkg.installTestPath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="258">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                yield util.moveElseThrowAsync(path.join(baseUnpackPath, pkg.packageRootPath), baseInstallPath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="258">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                yield util.moveElseThrowAsync(path.join(baseUnpackPath, pkg.packageRootPath), baseInstallPath);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="261">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                        const targetPath = path.join(baseInstallPath, p);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="261">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">                        const targetPath = path.join(baseInstallPath, p);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="331">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            let targetPath = path.join(baseInstallPath, path.basename(f));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="331">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            let targetPath = path.join(baseInstallPath, path.basename(f));
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/sessionTreeDataProvider.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/sessionTreeDataProvider.js" line="150">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            dark: path.join(imagesDir, 'dark', name + '.svg'),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/sessionTreeDataProvider.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/sessionTreeDataProvider.js" line="151">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            light: path.join(imagesDir, 'light', name + '.svg'),
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/tracing/logFileTraceListener.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/tracing/logFileTraceListener.js" line="37">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const indexFileName = path.join(this.logDirectory, `${datePrefix}_${Date.now()}${index}_${this.processName}.log`);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/tracing/logFileTraceListener.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/tracing/logFileTraceListener.js" line="37">
			<failure type="WARNING" message="Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.">            const indexFileName = path.join(this.logDirectory, `${datePrefix}_${Date.now()}${index}_${this.processName}.log`);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/tracing/logFileTraceListener.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/tracing/logFileTraceListener.js" line="50">
			<failure type="INFO" message="Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.">                    console.error(`Name Log File Failed. ${err.message}`, err.stack);
</failure>
		</testcase>
		<testcase name="contrib.nodejsscan.crypto_node.node_sha1" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/packageManager.js" line="197">
			<failure type="WARNING" message="The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive operation such as password hashing, or is used to ensure data integrity (collision sensitive) then you should use a stronger hashing algorithm. For passwords, consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`">                let hash = crypto.createHash('sha1').update(data).digest('hex');
</failure>
		</testcase>
		<testcase name="contrib.nodejsscan.crypto_node.node_sha1" classname="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/util.js" file="/Users/zta/Documents/EC521/src/unzipped/MS-vsliveshare-vsliveshare-audio-0.1.93/extension/out/util.js" line="36">
			<failure type="WARNING" message="The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive operation such as password hashing, or is used to ensure data integrity (collision sensitive) then you should use a stronger hashing algorithm. For passwords, consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`">        const hash = crypto.createHash(hashType);
</failure>
		</testcase>
	</testsuite>
</testsuites>
