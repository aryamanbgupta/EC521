<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="6" tests="6" time="0.0">
	<testsuite disabled="0" errors="0" failures="6" name="semgrep results" skipped="0" tests="6" time="0">
		<testcase name="javascript.browser.security.eval-detected.eval-detected" classname="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" file="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" line="330">
			<failure type="WARNING" message="Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.">                    instructions = eval(varset.substr(varset.indexOf(' ') + 1));
</failure>
		</testcase>
		<testcase name="javascript.browser.security.eval-detected.eval-detected" classname="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" file="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" line="413">
			<failure type="WARNING" message="Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.">                replacement = eval(this.RemoveFormat(expression));
</failure>
		</testcase>
		<testcase name="javascript.browser.security.eval-detected.eval-detected" classname="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" file="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" line="454">
			<failure type="WARNING" message="Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.">            if (eval(this.RemoveFormat(fragments[0]))) {
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp" classname="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" file="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" line="434">
			<failure type="WARNING" message="RegExp() called with a `variables` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.">                    expression = expression.replace(new RegExp('' + property + '', 'g'), prefix + variables[property] + sufix);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp" classname="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" file="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" line="438">
			<failure type="WARNING" message="RegExp() called with a `variables` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.">                    expression = expression.replace(new RegExp('' + property + '', 'g'), prefix + variables[property] + sufix);
</failure>
		</testcase>
		<testcase name="javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp" classname="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" file="/Users/zta/Documents/EC521/src/unzipped/profimedica-live-preview-0.0.3/extension/out/templateProcessor.js" line="442">
			<failure type="WARNING" message="RegExp() called with a `variables` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.">                    expression = expression.replace(new RegExp('' + property + '', 'g'), prefix + variables[property] + sufix);
</failure>
		</testcase>
	</testsuite>
</testsuites>
